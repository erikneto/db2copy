//@ts-check
"use strict";

var Conversation = require('watson-developer-cloud/conversation/v1');
var _ = require("lodash");

let conversationService;
let workspace_id;
let cont = 0;
let threshold;

module.exports = {

    init: (user,password,workspace,version_date,paramthreshold) => {
        let newService = {
                    username: user,
                    password: password,
                    version_date: version_date || '2017-04-21'
                };
        workspace_id = workspace;
        threshold = paramthreshold || 0.65;
        conversationService = new Conversation(newService);
    },

    runTest: () => {
        let fullTest = [];
        conversationService.getWorkspace({"workspace_id": workspace_id},(err,result) => {
            if(err){
                console.error("Error on Conversation getWorkspace: %j",err);
                return;
            }
            let wsoriginal = result;
            if(result.status === 'Available'){
                conversationService.getIntents({"workspace_id": workspace_id},(err,result) => {
                    let promises = result.intents.map(getExamples);

                    Promise.all(promises).then(intents => {
                        let tests = [];
                        for(var x=0;x<5;x++){
                            let tobetested = [];
                            intents.forEach( (element) => {
                                let item = {};
                                item.intent = element.intent;
                                item.test = [];
                                if(!element.endTest)
                                    element.startTest = 0;
                                else
                                    element.startTest = element.endTest;
                                element.endTest = Math.min(element.examples.length,element.startTest + Math.round(element.examples.length/5));
                                if(x === 4 && element.endTest < element.examples.length)
                                    element.endTest = element.examples.length;
                                
                                let arrSize = element.examples.length-1;
                                for(let y=element.startTest;y<element.endTest;y++){
                                    let msg = element.examples[y].text;
                                    if(checkForDuplicates(msg,element.intent,tobetested,tests))
                                        item.test.push(msg);
                                }

                                if(item.test.length > 0)
                                    tobetested.push(item);
                            });
                            let objTest = {
                                workspace: wsoriginal,
                                allintents: intents,
                                tobetested: tobetested,
                                run: x
                            }
                            
                            tests.push(objTest);
                        }
                        //let prmsTest = [];
                        let prmsTest = tests.map(createandTestWorkspace);
                        Promise.all(prmsTest).then(result => {
                            let allTests = [];
                            let summary = [];
                            result.forEach((e) => {
                                e.forEach((i)=>{
                                    allTests.push(i);
                                    let intent = _.find(summary,{"intent":i.correctIntent});
                                    if(!intent){
                                        intent = {
                                            intent: i.correctIntent,
                                            total: 0,
                                            correct: 0,   
                                            threshold: 0,
                                            examples: []
                                        }
                                        summary.push(intent);
                                    }
                                    intent.total++;
                                    intent.correct += (i.correctIntent === i.returnedIntent && i.confidence>=threshold)?1:0;
                                    intent.threshold += i.correctIntent === i.returnedIntent?1:0;
                                    intent.examples.push(i);
                                });
                            });
                            console.log("Sumário");
                            let total = 0;
                            let correct = 0;
                            let nothreshold = 0;
                            summary.forEach((e) => {
                                total += e.total;
                                correct += e.correct;
                                nothreshold += e.threshold;
                                console.log("Intenção %s Perguntas %d Acertos %d Acurácia %s% Sem Threshold %s%",e.intent,e.total,e.correct,(e.correct/e.total*100).toFixed(2),(e.threshold/e.total*100).toFixed(2));
                            });
                            console.log("%s Perguntas %d Acertos %d Acurácia %s% Sem Threshold %s%","Total",total,correct,(correct/total*100).toFixed(2),(nothreshold/total*100).toFixed(2));
                            
                        });     
                    });                    
                });
            }
        })
    }

}

function checkForDuplicates(msg,intent,tobetested,tests){
    let duplicate = false;
    let debug = (msg === "como solicitar uma adequação técnica");
    //let debug = (msg === "durante a análise técnica, é possível solicitar uma adequação técnica");
    tobetested.forEach((tb) => {
        if(tb.intent === intent){
            duplicate = duplicate || tb.test.indexOf(msg)>-1;
        }
    });
    if(!duplicate){
        tests.forEach((t)=>{
            t.tobetested.forEach((tb) => {
                if(tb.intent === intent){
                    duplicate = duplicate || tb.test.indexOf(msg)>-1;
                }
            });
        });
    }
    return !duplicate;
}

function getExamples(element) {
    return new Promise(function (resolve, reject) {
        conversationService.getExamples(
            {
                "workspace_id": workspace_id,
                "intent": element.intent
            },(err,result) => {
                if(err){
                    reject(err);
                    return;
                }
                let intent = {};
                intent.intent = element.intent;
                intent.examples = [];
                result.examples.forEach(function(element){
                    intent.examples.push({"text": element.text});
                });
                return resolve(intent);
            });
    });
}

function createandTestWorkspace(objTest){
    return new Promise(function (resolve, reject) {
        //criar nova workspace
        let wsnew = clone(objTest.workspace);
        wsnew.name += " test " + objTest.run;
        wsnew.intents = [];
        objTest.allintents.forEach((i) => {
            let examples = [];
            i.examples.forEach((e)=>{
                examples.push({
                    text: e.text
                });
            });
            wsnew.intents.push({
                intent: i.intent,
                examples: examples
            });
        });

        objTest.tobetested.forEach((toDelete) => {
            let intent = _.find(wsnew.intents,{"intent":toDelete.intent});
            // @ts-ignore
            _.remove(intent.examples, (n) => {
                return toDelete.test.indexOf(n.text)>-1
            });
        });

        conversationService.createWorkspace(wsnew, (err,result) => {
            if(err)
                console.error("Error on Conversation createWorkspace: %j",err);
            if(!err){
                wsnew.workspace_id = result.workspace_id;
                let running = false;
                let intervalId = setInterval( () => {
                    if(!running){
                        running = true;
                        conversationService.getWorkspace({"workspace_id": wsnew.workspace_id},(err,result) => {
                            running = false;
                            if(err){
                                console.error("Error on Conversation getWorkspace 2: %j",err);
                                return reject(err);
                            }                            

                            if(result.status === "Available"){
                                let promises = objTest.tobetested.map((e) => {return testConversation(e,wsnew.workspace_id)});
                                Promise.all(promises).then(intents => {
                                    let retpromises = [];
                                    intents.forEach((i)=>{
                                        i.forEach((e)=>{
                                            retpromises.push(e);
                                        });
                                    });

                                    conversationService.deleteWorkspace({"workspace_id":result.workspace_id},(err,result) => {
                                        
                                        if(err){
                                            console.error("Error on Conversation deleteWorkspace: %j",err);
                                            return reject(err);
                                        }
                                        if(!err){
                                            return resolve(retpromises);
                                        }
                                    });
                                    
                                }).catch((err) => {
                                    console.error(err);
                                    return reject(err);
                                });
                                
                                clearInterval(intervalId);
                            }
                        });
                    }
                },3000);
            }            
        })
    });
}


function testConversation(element,wsid){
    return new Promise(function (resolve, reject) {
        let erro = {}
        let promises = element.test.map((e) => {return sendMessage(e,wsid)});
        Promise.all(promises).then(result => 
        {
            let tested = [];
            result.forEach((e)=>{
                if(e.intents.length === 0){
                    e.intents.push({
                        intent: "",
                        confidence: 0
                    });
                }

                tested.push({
                    example: e.input.text,
                    returnedIntent: e.intents[0].intent,
                    confidence: e.intents[0].confidence,
                    correctIntent: element.intent,
                    intents: e.intents
                });
            });
            return resolve(tested);
        }).catch((err) => {
            console.error(err);
            return reject(err);
        });
    });
}

function sendMessage(message,wsid,msg2){
    return new Promise(function (resolve, reject) {
        let params = {
            input: {
                text: message   
            },
            workspace_id: wsid,
            alternate_intents: true,
            context: {}
        };
        let cont = 0;
        
        conversationService.message(params, (err,result) => {
            if(err){
                if(err.code === "ENOTFOUND"){
                    return resolve(sendMessage(message,wsid,message));
                }
                else {
                    console.error("Error on Conversation message. Workspace %s: %j",wsid,err);
                    return reject(err);
                }
            }
            
            if(!err){
                return resolve(result);
            }
        });
        
    });    
}

function clone(obj) {
    if (null == obj) return obj;
    if("object" == typeof obj){

        var copy = obj.constructor();
        for (var attr in obj) {
            if (obj.hasOwnProperty(attr)) copy[attr] = obj[attr];
        }
        return copy;
    }
}